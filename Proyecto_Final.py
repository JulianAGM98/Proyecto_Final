# -*- coding: utf-8 -*-
"""Proyecto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1izOK4lJMabBTmZkB8HYjEt9wiHSbEEHF
"""

#///////////////////PROYECTO FINAL//////////////////////
#/////Curso: Introducción a la ciencia de datos con python////
#//////////Estudiante: Julián Andrés González Moreno///////

"""**PARTE 1: EXTRACCIÓN Y LIMPIEZA DE DATOS**




"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

file_path = '/content/car_sales.csv'

df = pd.read_table(file_path)
df.head()

df = pd.read_table(file_path, delimiter = ',')
df.head()

plt.figure(figsize=[30,30])
sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap="Blues")
sns.set(font_scale=1)
plt.show()
plt.close

df.isnull()

df.isnull().sum()

df[["__year_resale_value","Price_in_thousands"]].astype('float').hist(figsize=(10,10), color = "b")
plt.show()
plt.close()

df["__year_resale_value"].replace(np.nan, df["__year_resale_value"].astype("float").mean(), inplace=True)

df["Fuel_efficiency"].replace(np.nan, df["Fuel_efficiency"].astype("float").mean(), inplace=True)
df["Price_in_thousands"].replace(np.nan, df["Price_in_thousands"].astype("float").mean(), inplace=True)
df["Power_perf_factor"].replace(np.nan, df["Power_perf_factor"].astype("float").mean(), inplace=True)
df["Engine_size"].replace(np.nan, df["Engine_size"].astype("float").mean(), inplace=True)
df["Horsepower"].replace(np.nan, df["Horsepower"].astype("float").mean(), inplace=True)
df["Curb_weight"].replace(np.nan, df["Curb_weight"].astype("float").mean(), inplace=True)

df.dropna(subset=["Wheelbase"], axis=0, inplace=True)
df.dropna(subset=["Width"], axis=0, inplace=True)
df.dropna(subset=["Length"], axis=0, inplace=True)

df.reset_index(drop = True, inplace=True)
plt.figure(figsize=[30,30])
sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap="Blues")
sns.set(font_scale=1)
plt.show()
plt.close

df.dtypes

df[["Latest_Launch"]] = df[["Latest_Launch"]].astype("datetime64")

df.dtypes

"""**PARTE 2: ANÁLISIS EXPLORATORIO DE DATOS**"""

df.describe()

df["Price_in_thousands"].describe()

#NORMALIZACIÓN
df[["Length","Width"]]
df['Length']=df['Length']/df['Length'].max()
df['Width']=df['Width']/df['Width'].max()
df[["Length","Width"]].head()

#DISCRETIZACIÓN
plt.figure(figsize=[10,5])
sns.histplot(df["Horsepower"],stat="count")
plt.title("Horsepower bins")
sns.set(font_scale=1.5)
plt.show()
plt.close()

bins = np.linspace(min(df["Horsepower"]),
                   max(df["Horsepower"]),
                   5)
bins

group_names = ['Low', 'Medium', 'Hight', 'Extra_High']
df['horsepower_agruped'] = pd.cut(df['Horsepower'],
                                  bins,
                                  labels=group_names,
                                  include_lowest=True)
df[['Horsepower','horsepower_agruped']].head(10)

sns.histplot(data=df["horsepower_agruped"])
plt.xlabel("Horsepower")
plt.ylabel("count")
plt.title("Horse_Power_Agruped")
plt.show()
plt.close()

#DUMMY DATASET
dummy_variable_1 = pd.get_dummies(df["Vehicle_type"])
dummy_variable_1.rename(columns={'Passenger':'Passenger_Type','Car': 'Car_type'}, inplace = True)
dummy_variable_1.head()

#BOXPLOT
plt.figure(figsize=[15,8])
sns.set(style="whitegrid")
ax= sns.boxplot(x="Vehicle_type",y="Sales_in_thousands", data=df, showfliers = False)
ax= sns.boxplot(x="Vehicle_type",y="Sales_in_thousands", data=df, color = "Orange")
plt.show()
plt.close()

#REGPLOT & HEATMAP
correlations = df.corr()
correlations

correlations = df.corr()
f, ax = plt.subplots(figsize = (10,10))
sns.heatmap(correlations, annot = True)
sns.set(font_scale=1)
plt.show()
plt.close()

#CORRELACIPON POSITIVA
sns.regplot(x="Horsepower", y="Power_perf_factor", data=df)
plt.ylim(0,)
plt.show()
plt.close()

correlations = df[["Horsepower","Power_perf_factor"]].corr()
f, ax = plt.subplots(figsize = (5,5))
sns.heatmap(correlations, annot = True)
sns.set(font_scale=1)
plt.show()
plt.close()

#CORRELACIPON NEGATIVA
sns.regplot(x="Fuel_efficiency", y="Curb_weight", data=df)
plt.ylim(0,)
plt.show()
plt.close()

correlations = df[["Fuel_efficiency","Curb_weight"]].corr()
f, ax = plt.subplots(figsize = (5,5))
sns.heatmap(correlations, annot = True)
sns.set(font_scale=1)
plt.show()
plt.close()

#CORRELACION NEUTRA
sns.regplot(x="Fuel_capacity", y="Sales_in_thousands", data=df)
plt.ylim(0,)
plt.show()
plt.close()

correlations = df[["Fuel_capacity","Sales_in_thousands"]].corr()
f, ax = plt.subplots(figsize = (5,5))
sns.heatmap(correlations, annot = True)
sns.set(font_scale=1)
plt.show()
plt.close()

"""**PARTE 3: CREANDO MODELOS DE MACHINE LEARNING**"""

#REGRESIÓN LINEAL SIMPLE
from sklearn.linear_model import LinearRegression 
from sklearn.model_selection import train_test_split

X = df[['Engine_size']]
Y = df['Price_in_thousands'].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

regressor = LinearRegression()
regressor.fit(X_train, Y_train)

regressor_train = plt
regressor_train.scatter(X_train, Y_train, color = 'blue')
regressor_train.plot(X_train, regressor.predict(X_train), color = 'black')
regressor_train.title('Tamaño del motor VS Precio en miles (Training)')
regressor_train.xlabel('Tamaño del motor')
regressor_train.ylabel('Precio en miles')
regressor_train.show()
regressor_train.close()

regressor_test = plt
regressor_test.scatter(X_test, Y_test, color = 'blue')
regressor_test.plot(X_train, regressor.predict(X_train), color = 'black')
regressor_test.title('Tamaño del motor VS Precio en miles (Testing)')
regressor_test.xlabel('Tamaño del motor')
regressor_test.ylabel('Precio en miles')
regressor_test.show()
regressor_test.close()

print("Intercepto: {}, Coeficiente: {}".format(regressor.intercept_, regressor.coef_))

regressor.score(X_test, Y_test)

#REGRESIÓN LINEAL MÚLTIPLE
X = df[['Horsepower', 'Curb_weight', 'Engine_size','Length','Width']]
Y = df['Price_in_thousands'].values

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)
regressor = LinearRegression()
regressor.fit(X_train, Y_train)

fig, ax = plt.subplots(figsize=(8, 8))
ax = sns.distplot(Y_train, hist=False, color="r")
sns.distplot(regressor.predict(X_train), hist=False, color="b", ax=ax)

#ax.set(yticklabels=[])  # remove the tick labels
#ax.tick_params(left=False)  # remove the ticks
ax.set(ylabel=None)
plt.legend(labels=['Precio en miles', 'Prediccion - Train'])

plt.title('Actual vs Valor ajustado - Training')
plt.xlabel('Precio en miles')

plt.legend(labels=['Precio', 'Prediccion - Train'])

plt.show()
plt.close()

fig, ax = plt.subplots(figsize=(8, 8))
ax = sns.distplot(Y_test, hist=False, color="r")
sns.distplot(regressor.predict(X_test), hist=False, color="b", ax=ax)

#ax.set(yticklabels=[])  # remove the tick labels
#ax.tick_params(left=False)  # remove the ticks
ax.set(ylabel=None)
plt.legend(labels=['Precio', 'Prediccion - Testing'])

plt.title('Actual vs Valores ajustados - Testing')
plt.xlabel('Precio en miles')

plt.legend(labels=['Precio', 'Precio - Testing'])

plt.show()
plt.close()

regressor.score(X_test, Y_test)

print("Intercepto: {}, Coeficientes: {}".format(regressor.intercept_, regressor.coef_))

#RAMDOM FOREST
from sklearn.ensemble import RandomForestRegressor

X = df[['Horsepower', 'Curb_weight', 'Engine_size','Length','Width']]
Y = df['Price_in_thousands'].values
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

forest = RandomForestRegressor(n_jobs=2,
                               oob_score=True,
                               n_estimators=10)
forest.fit(X_train,Y_train)

fig, ax = plt.subplots(figsize=(8, 8))
ax = sns.distplot(Y_train, hist=False, color="r")
sns.distplot(regressor.predict(X_train), hist=False, color="b", ax=ax)

#ax.set(yticklabels=[])  # remove the tick labels
#ax.tick_params(left=False)  # remove the ticks
ax.set(ylabel=None)
plt.legend(labels=['Precio en miles', 'Prediccion - Train'])

plt.title('Actual vs Valor ajustado - Training')
plt.xlabel('Precio en miles')

plt.legend(labels=['Precio', 'Prediccion - Train'])

plt.show()
plt.close()

forest = RandomForestRegressor(n_jobs=2,
                               oob_score=True,
                               n_estimators=10)
forest.fit(X_test,Y_test)

fig, ax = plt.subplots(figsize=(8, 8))
ax = sns.distplot(Y_test, hist=False, color="r")
sns.distplot(regressor.predict(X_test), hist=False, color="b", ax=ax)

#ax.set(yticklabels=[])  # remove the tick labels
#ax.tick_params(left=False)  # remove the ticks
ax.set(ylabel=None)
plt.legend(labels=['Precio', 'Prediccion - Testing'])

plt.title('Actual vs Valores ajustados - Testing')
plt.xlabel('Precio en miles')

plt.legend(labels=['Precio', 'Precio - Testing'])

plt.show()
plt.close()

forest.score(X_test, Y_test)

"""**PARTE 4: GENERACIÓN DE VISUALIZACIÓN EFECTIVA**"""

#Limpieza de datos
df[['Horsepower','horsepower_agruped']].head(10)

df[['Horsepower','horsepower_agruped']].groupby("horsepower_agruped").count()

sns.histplot(data=df["horsepower_agruped"]) 
plt.show()
plt.close()

df[["Power_perf_factor"]].describe()

plt.figure(figsize=[8,8])
sns.set(style="whitegrid")
ax = sns.boxplot(y="Power_perf_factor", data=df, showfliers = True)
ax = sns.swarmplot(y="Power_perf_factor", data=df, color="Red")
plt.show()
plt.close()

X_test.head()

forest.predict(X_test)

df_price = X_test.copy().reset_index(drop=True)
df_price["Price"] = Y_test
df_price["Prece_predicted"] = forest.predict(X_test)
df_price

#GRÁFICO 1
fig, ax = plt.subplots(figsize=(10, 10)) 
sns.histplot(df["Price_in_thousands"], color='#F02B2B', kde = True) # Tomamos la variable precio, con el color azul de nuestra paleta de colores
plt.xlabel("Precio (en miles de dolares)") # Los ejes siempre es recomendable colocarles titulos
plt.ylabel("Cantidad")
plt.title("Cantidad de Automoviles vendidos por precio") # Un titulo del grafico siempre es importante
plt.show()
plt.close()

"""**CONCLUSIÓN**: El precio de venta de los automoviles se encuentra en un rango entre 10000 y 30000 dolares. El auto con mayores ventas corresponde al que tiene un valor de 20000 dólares con 34 unidades vendidas."""

#GRÁFICO 2
fig, ax = plt.subplots(figsize=(10, 10)) 
sns.set(style="whitegrid")
colors = ["#4B22F4", "#9C86F9", "#0BD4C1"]
sns.set_palette(sns.color_palette(colors))
ax = sns.boxplot(x="Vehicle_type", y="Horsepower", data=df, showfliers = False)
ax = sns.swarmplot(x="Vehicle_type", y="Horsepower", data=df, color=".25")

plt.xlabel("")
plt.ylabel("Caballos de fuerza")
plt.title("Tipo de vehículo vs Caballos de fuerza")
sns.set(font_scale=1)
plt.show()
plt.close()

"""**CONCLUSIÓN**: Se puede observar que el tipo de automóvil con más caballos de fuerza son los de tipo pasajero.

"""

#GRÁFICO 3
correlations = df[['Horsepower', 'Curb_weight', 'Engine_size','Width','Length','Fuel_capacity','Price_in_thousands']].corr()
f, ax = plt.subplots(figsize = (10,10))
sns.heatmap(correlations, annot = True)
sns.set(font_scale=1)
plt.title('Relación de variables')
plt.show()
plt.close()

"""**CONCLUSIÓN**: 
Se encontraron 6 caracteristicas en nuestro set de datos que cuentan una relacion positiva en el precio del automovil

*   Caballos de fuerza
*   Peso en el vacio
*   Tamaño del motor
*   Peso
*   Largo
*   Capacidad de combustible
"""

#GRAFICA 4
fig, axes = plt.subplots(3, 2, figsize=(14, 14))

sns.regplot(ax = axes[0, 0], x="Horsepower", y="Price_in_thousands", data=df)
axes[0,0].set_xlabel("Caballos de fuerza")
axes[0,0].set_ylabel("Precio (En dolares)")
sns.regplot(ax = axes[0, 1], x="Curb_weight", y="Price_in_thousands", data=df)
axes[0,1].set_xlabel("Peso en el vacio (kg)")
axes[0,1].set_ylabel("Precio (En dolares)")
sns.regplot(ax = axes[1, 0], x="Engine_size", y="Price_in_thousands", data=df)
axes[1,0].set_xlabel("Peso del motor (kg)")
axes[1,0].set_ylabel("Precio (En dolares)")
sns.regplot(ax = axes[1, 1], x="Width", y="Price_in_thousands", data=df)
axes[1,1].set_xlabel("Peso(Kg)")
axes[1,1].set_ylabel("Precio (En dolares)")
sns.regplot(ax = axes[2, 0], x="Length", y="Price_in_thousands", data=df)
axes[2,0].set_xlabel("Largo")
axes[2,0].set_ylabel("Precio (En dolares)")
sns.regplot(ax = axes[2, 1], x="Fuel_efficiency", y="Price_in_thousands", data=df)
axes[2,1].set_xlabel("Eficiencia de combustible")
axes[2,1].set_ylabel("Precio (En dolares)")




plt.show()
plt.close()

"""**CONCLUSIÓN**: 
Se observa una relación positiva del precio en la siguientes variables:


1.   Caballos de fuerza
2.   Peso en el vacio
3.   Peso

Se observa una relación neutra en:
1. Largo

Se observa una relación negativa en:
1. Eficiencia de combustible


"""